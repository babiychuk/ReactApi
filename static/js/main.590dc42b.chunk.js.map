{"version":3,"sources":["components/table.js","App.js","serviceWorker.js","index.js"],"names":["Table","jsonData","this","props","data","react_default","a","createElement","className","Object","keys","map","keyName","key","id","title","description","scoreDisplayMode","score","React","Component","App","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","isLoaded","_this2","fetch","then","res","json","setState","lighthouseResult","audits","console","log","table","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gRAgCeA,mLA3BP,IAAMC,EAAWC,KAAKC,MAAMC,KAC5B,OAEQC,EAAAC,EAAAC,cAAA,SAAOC,UAAU,cACbH,EAAAC,EAAAC,cAAA,iEACAF,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YAAd,UACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eAAd,cACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,UAAd,QACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,gBAAd,gBAGJC,OAAOC,KAAKT,GAAUU,IAAI,SAACC,EAAQC,GAAT,OACtBR,EAAAC,EAAAC,cAAA,MAAIM,IAAKZ,EAASW,GAASE,GAAIN,UAAWK,EAAM,GAAK,EAAI,OAAS,OAC9DR,EAAAC,EAAAC,cAAA,UAAKM,EAAI,GACTR,EAAAC,EAAAC,cAAA,MAAIQ,MAAOd,EAASW,GAASI,aAAcf,EAASW,GAASG,OAC7DV,EAAAC,EAAAC,cAAA,UAAKN,EAASW,GAASK,kBACvBZ,EAAAC,EAAAC,cAAA,UAAgC,MAA3BN,EAASW,GAASM,MAAgB,EAAIjB,EAASW,GAASM,kBApBrEC,IAAMC,WCsCXC,cAnCX,SAAAA,EAAYlB,GAAO,IAAAmB,EAAA,OAAAb,OAAAc,EAAA,EAAAd,CAAAP,KAAAmB,IACfC,EAAAb,OAAAe,EAAA,EAAAf,CAAAP,KAAAO,OAAAgB,EAAA,EAAAhB,CAAAY,GAAAK,KAAAxB,KAAMC,KAEDwB,MAAQ,CACTvB,KAAM,GACNwB,UAAU,GALCN,oFASE,IAAAO,EAAA3B,KACjB4B,MAAM,qFACDC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAE,GACFJ,EAAKK,SAAS,CACVN,UAAU,EACVxB,KAAM6B,EAAKE,iBAAiBC,4CAQxC,OAFiBlC,KAAKyB,MAAjBC,UAIIS,QAAQC,IAAIpC,KAAKyB,MAAMvB,MAExBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAACgC,EAAD,CAAOnC,KAAMF,KAAKyB,MAAMvB,SAJ5BC,EAAAC,EAAAC,cAAA,kCA1BEY,IAAMC,uBCSJoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAOzC,EAAAC,EAAAC,cAACwC,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,KAAK,SAAAsB,GACjCA,EAAaC","file":"static/js/main.590dc42b.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass Table extends React.Component {\r\n\r\n    render() {\r\n        const jsonData = this.props.data;\r\n        return (\r\n\r\n                <table className=\"jsonAudits\">\r\n                    <caption>Test wokr by Evgeniy Babiychuk (093-589-50-84)</caption>\r\n                    <tr>\r\n                        <th className=\"thNumber\">Number</th>\r\n                        <th className=\"thNameAudit\">Name audit</th>\r\n                        <th className=\"thMode\">Mode</th>\r\n                        <th className=\"thScoreAudit\">Score audit</th>\r\n                    </tr>\r\n                {\r\n                    Object.keys(jsonData).map((keyName,key) => (\r\n                        <tr key={jsonData[keyName].id} className={key % 2 == 0 ? \"even\" : \"odd\"}>\r\n                            <td>{key+1}</td>\r\n                            <td title={jsonData[keyName].description}>{jsonData[keyName].title}</td>\r\n                            <td>{jsonData[keyName].scoreDisplayMode}</td>\r\n                            <td>{jsonData[keyName].score == null ? 0 : jsonData[keyName].score}</td>\r\n                        </tr>\r\n                    ))\r\n                }\r\n                </table>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default Table;\r\n","import React from 'react';\r\nimport Table from './components/table';\r\n\r\nclass App extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            data: [],\r\n            isLoaded: false,\r\n        };\r\n    }\r\n\r\n    componentWillMount() {\r\n        fetch(\"https://www.googleapis.com/pagespeedonline/v5/runPagespeed/?url=https://habr.com/\")\r\n            .then(res => res.json())\r\n            .then(json => {\r\n                this.setState({\r\n                    isLoaded: true,\r\n                    data: json.lighthouseResult.audits,\r\n                })\r\n            })\r\n    }\r\n\r\n    render(){\r\n        var {isLoaded} = this.state;\r\n\r\n        if (!isLoaded){\r\n         return <div> Loading... </div>;\r\n        } else { console.log(this.state.data);\r\n            return(\r\n                <div className=\"main\">\r\n                    <Table data={this.state.data}/>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport './App.css'\r\nimport './components/table.css'\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}